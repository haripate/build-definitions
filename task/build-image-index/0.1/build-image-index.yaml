apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "docker"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: build-image-index
spec:
  description: |-
    This takes existing Image Manifests and combines them in an Image Index.
  params:
  - name: IMAGE
    description: The target image and tag where the image will be pushed to.
    type: string
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    type: string
    default: "true"
  - name: COMMIT_SHA
    description: The commit the image is built from.
    type: string
    default: ""
  - name: IMAGES
    description: List of Image Manifests to be referenced by the Image Index
    type: array
  - name: IMAGE_EXPIRES_AFTER
    description: Delete image tag after specified time resulting in garbage collection of the digest. Empty means to keep the image tag. Time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    type: string
    default: ""
  - name: ALWAYS_BUILD_INDEX
    description: Build an image index even if IMAGES is of length 1. Default true. If the image index generation is skipped, the task will forward values for params.IMAGES[0] to results.IMAGE_*. In order to properly set all results, use the repository:tag@sha256:digest format for the IMAGES parameter.
    type: string
    default: "true"
  - name: STORAGE_DRIVER
    description: Storage driver to configure for buildah
    type: string
    default: vfs
  - name: SQUASH
    description: Squash all new and previous layers added as a part of this build, as per --squash
    type: string
    default: "false"
  - name: caTrustConfigMapName
    type: string
    description: The name of the ConfigMap to read CA bundle data from.
    default: trusted-ca
  - name: caTrustConfigMapKey
    type: string
    description: The name of the key in the ConfigMap that contains the CA bundle data.
    default: ca-bundle.crt
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed
    name: IMAGE_URL
  - description: List of all referenced image manifests
    name: IMAGES
  - description: Image reference of the built image containing both the repository and the digest
    name: IMAGE_REF
  - name: SBOM_BLOB_URL
    description: Reference of SBOM blob digest to enable digest-based verification from provenance
    type: string
  stepTemplate:
    env:
    - name: BUILDAH_FORMAT
      value: oci
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: ALWAYS_BUILD_INDEX
      value: $(params.ALWAYS_BUILD_INDEX)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
  steps:
  - image: quay.io/konflux-ci/buildah-task:latest@sha256:5cbd487022fb7ac476cbfdea25513b810f7e343ec48f89dc6a4e8c3c39fa37a2
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    name: build
    computeResources:
      limits:
        memory: 4Gi
      requests:
        memory: 512Mi
        cpu: 250m
    args: ["$(params.IMAGES[*])"]
    script: |
      #!/bin/bash
      # Fixing group permission on /var/lib/containers
      set -eu
      set -o pipefail
      chown root:root /var/lib/containers

      sed -i 's/^\s*short-name-mode\s*=\s*.*/short-name-mode = "disabled"/' /etc/containers/registries.conf

      if [[ $# -ne 1 && "$ALWAYS_BUILD_INDEX" != "true" ]]; then
        echo "Skipping image index generation while supplying multiple image inputs is unsupported."
        exit 2
      fi

      buildah manifest create "$IMAGE"
      for i in $@
      do
        TOADD="$i"
        TOADD_URL="$(echo "$i" | cut -d@ -f1)"
        TOADD_DIGEST="$(echo "$i" | cut -d@ -f2)"
        if [[ $(echo "$i" | tr -cd ":" | wc -c) == 2 ]]; then
          #format is repository:tag@sha256:digest
          #we need to remove the tag, and just reference the digest
          #as tag + digest is not supported
          TOADD_REPOSITORY="$(echo "$i" | cut -d: -f1)"
          TOADD="${TOADD_REPOSITORY}@${TOADD_DIGEST}"
        fi
        if [[ "$ALWAYS_BUILD_INDEX" != "true" ]]; then
          echo "Skipping image index generation. Returning results for $TOADD."
          echo -n "${TOADD_URL}" > "$(results.IMAGE_URL.path)"
          echo -n "${TOADD_DIGEST}" > "$(results.IMAGE_DIGEST.path)"
          echo -n "${TOADD}" > "$(results.IMAGES.path)"
          exit 0
        fi
        echo "Adding $TOADD"
        buildah manifest add $IMAGE "docker://$TOADD" --all
      done

      status=-1
      max_run=5
      sleep_sec=10
      for run in $(seq 1 $max_run); do
        status=0
        [ "$run" -gt 1 ] && sleep $sleep_sec
        echo "Pushing image to registry"
        buildah manifest push \
          --tls-verify=$TLSVERIFY \
          --digestfile image-digest $IMAGE \
          docker://$IMAGE && break || status=$?
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to push image to registry after ${max_run} tries"
          exit 1
      fi

      INDEX_REPOSITORY="$(echo "$IMAGE" | cut -d@ -f1 | cut -d: -f1)"
      MANIFEST_DIGESTS=$(buildah manifest inspect "$IMAGE" | jq -er ".manifests[].digest")
      image_manifests=""
      for i in $MANIFEST_DIGESTS
      do
        image_manifests="${image_manifests} ${INDEX_REPOSITORY}@${i},"
      done

      cat image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee "$(results.IMAGE_URL.path)"
      {
        echo -n "${IMAGE}@"
        cat "image-digest"
      } > "$(results.IMAGE_REF.path)"
      echo -n "${image_manifests:1:-1}" > "$(results.IMAGES.path)"
    securityContext:
      capabilities:
        add:
          - SETFCAP

  - image: quay.io/redhat-appstudio/sbom-utility-scripts-image:d4935b35eb0849841412d5d1e481a812e939f2bf
    name: create-sbom
    computeResources:
      limits:
        memory: 512Mi
        cpu: 200m
      requests:
        memory: 256Mi
        cpu: 100m
    env:
    - name: IMAGE_URL
      value: $(results.IMAGE_URL.path)
    - name: IMAGE_DIGEST
      value: $(results.IMAGE_DIGEST.path)
    script: |
      TOADD="${IMAGE_URL}@${IMAGE_DIGEST}"
      buildah manifest inspect "$TOADD" > manifest_data.json
      python3 /scripts/index-image-sbom-script.py \
        --image-index-url "$IMAGE_URL" \
        --image-index-digest "$IMAGE_DIGEST" \
        --inspect-input-file manifest_data.json
        --output-path sbom-results.json
    workingDir: $(workspaces.source.path)
    securityContext:
      runAsUser: 0

  - name: inject-sbom-and-push
    image: quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275
    computeResources:
      limits:
        memory: 4Gi
        cpu: '4'
      requests:
        memory: 1Gi
        cpu: '1'
    script: |
      #!/bin/bash
      set -e

      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $IMAGE | cut -f1 -d'@')
      base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $IMAGE)
      container=$(buildah from --pull-never $IMAGE)
      buildah copy $container sbom-results.json /root/buildinfo/content_manifests/
      buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container

      BUILDAH_ARGS=()
      if [ "${SQUASH}" == "true" ]; then
        BUILDAH_ARGS+=("--squash")
      fi

      buildah commit "${BUILDAH_ARGS[@]}" $container $IMAGE

      status=-1
      max_run=5
      sleep_sec=10
      for run in $(seq 1 $max_run); do
        status=0
        [ "$run" -gt 1 ] && sleep $sleep_sec
        echo "Pushing sbom image to registry"
        buildah push \
          --tls-verify=$TLSVERIFY \
          --digestfile $(workspaces.source.path)/image-digest $IMAGE \
          docker://$IMAGE && break || status=$?
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to push sbom image to registry after ${max_run} tries"
          exit 1
      fi

      cat "$(workspaces.source.path)"/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee $(results.IMAGE_URL.path)
      {
        echo -n "${IMAGE}@"
        cat "$(workspaces.source.path)/image-digest"
      } > "$(results.IMAGE.path)"

      # Remove tag from IMAGE while allowing registry to contain a port number.
      sbom_repo="${IMAGE%:*}"
      sbom_digest="$(sha256sum sbom-cyclonedx.json | cut -d' ' -f1)"
      # The SBOM_BLOB_URL is created by `cosign attach sbom`.
      echo -n "${sbom_repo}@sha256:${sbom_digest}" | tee "$(results.SBOM_BLOB_URL.path)"

    securityContext:
      runAsUser: 0
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: trusted-ca
      mountPath: /mnt/trusted-ca
      readOnly: true
    workingDir: $(workspaces.source.path)

  - name: upload-sbom
    image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
    script: |
      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      cosign attach sbom --sbom sbom-cyclonedx.json --type cyclonedx "$(cat "$(results.IMAGE_REF.path)")"
    computeResources:
      limits:
        memory: 512Mi
        cpu: 200m
      requests:
        memory: 256Mi
        cpu: 100m
    volumeMounts:
    - name: trusted-ca
      mountPath: /mnt/trusted-ca
      readOnly: true
    workingDir: $(workspaces.source.path)
  
  volumes:
  - name: trusted-ca
  configMap:
    name: $(params.caTrustConfigMapName)
    items:
      - key: $(params.caTrustConfigMapKey)
        path: ca-bundle.crt
    optional: true

    